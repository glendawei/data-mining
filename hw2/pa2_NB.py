# -*- coding: utf-8 -*-
"""NB

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ib3wovNDxaKaDVjvtTHzOGv3WC2AS4b4
"""

from sklearn.model_selection import train_test_split
import random
import os
from google.colab import drive
drive.mount('/content/drive')
document_folder = "/content/drive/My Drive/PA1-data"

# Step 1: Load Document Labels
with open('/content/drive/My Drive/training_new.txt', 'r') as file:
    classes = [list(map(int, line.split())) for line in file]
    print(classes[0])

texts = []
labels = []
for i in range(1, 1096):
    with open(os.path.join(document_folder, f"{i}.txt"), 'r', encoding='utf-8') as file:
        content = file.read()
        texts.append(content)
        labels.append(i)

from sklearn.feature_extraction.text import CountVectorizer
binary_vectorizer = CountVectorizer(binary=True)
binary_vectors = binary_vectorizer.fit_transform(texts)
#print(binary_vectors.toarray())
binary_vectors.shape

x,y  = [],[]

for i in classes:
  cls= i[0]
  for doc_id in i[1:]:
    x.append(binary_vectors[doc_id-1].toarray().flatten())
    y.append(cls)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1,stratify=y,random_state=42)
import numpy as np

x_train = np.array(x_train)
x_test = np.array(x_test)


x_train.shape
x_test.shape

from sklearn. naive_bayes import BernoulliNB
model = BernoulliNB()
model.fit(x_train,y_train)
predicted_results = []
expected_results = []
expected_results.extend(y_test)
predicted_results.extend(model.predict(x_test))
print(predicted_results)

from sklearn import metrics
print(metrics.classification_report(expected_results, predicted_results))

from sklearn.metrics import precision_recall_curve, precision_recall_fscore_support, auc
import matplotlib.pyplot as plt
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from itertools import cycle

model.fit(x_train, y_train)

# Predict probabilities for each class
y_score = model.predict_proba(x_test)

# Binarize the labels
y_test_bin = label_binarize(y_test, classes=np.unique(y))

# Compute precision-recall pairs for each class
for i in range(len(classes)):
    precision, recall, _ = precision_recall_curve(y_test_bin[:, i], y_score[:, i])
    auc_score = auc(recall, precision)
    plt.plot(recall, precision, lw=2, label=f'Class {i+1} (AUC = {auc_score:.2f})')

plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Multiclass Precision-Recall Curve')
plt.legend(loc='best')
plt.show()